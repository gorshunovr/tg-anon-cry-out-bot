// Copyright (C) 2025 Roman Gorshunov
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License Version 3.0.
//
// Anonymous Telegram Bot "Cry Out"
// Description: A Telegram bot that verifies and publishes anonymous messages in a channel
//              using the OpenAI API, with webhook/polling support and rate limiting.

package main

import (
	"context"
	"log"
	"net/http"
	"os"
	"os/signal"
	"strconv"
	"strings"
	"sync"
	"syscall"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	openai "github.com/sashabaranov/go-openai"
)

var (
	userLastMessageTime = make(map[int]time.Time)
	userLastMessage     = make(map[int]string)
	mu                  sync.Mutex
	rateLimitDuration   = 20 * time.Minute
)

func verifyMessageWithOpenAI(client *openai.Client, message string) (bool, string, error) {
	prompt := os.Getenv("OPENAI_PROMPT")
	if prompt == "" {
		prompt = "–ü—Ä–æ–≤–µ—Ä—å, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º: –Ω–∞–ø–∏—Å–∞–Ω–æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≥—Ä—É–±—ã—Ö —Ä—É–≥–∞—Ç–µ–ª—å—Å—Ç–≤ (–¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è —Å–ª–æ–≤–∞ —Å —Å–∏–º–≤–æ–ª–∞–º–∏ '*'), –∞ —Ü–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è, –≤—ã–ø–ª–∞–∫–∞—Ç—å—Å—è, –≤—ã–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –ø—É–±–ª–∏—á–Ω–æ. –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'. –°–æ–æ–±—â–µ–Ω–∏–µ:\n\n"
	}

	resp, err := client.CreateChatCompletion(context.Background(), openai.ChatCompletionRequest{
		Model: openai.GPT3Dot5Turbo,
		Messages: []openai.ChatCompletionMessage{
			{Role: "system", Content: prompt + message},
		},
		MaxTokens: 10,
	})

	if err != nil {
		return false, "", err
	}

	answer := strings.ToLower(strings.TrimSpace(resp.Choices[0].Message.Content))
	return answer == "–¥–∞", answer, nil
}

func main() {
	botToken := os.Getenv("TELEGRAM_BOT_TOKEN")
	openaiToken := os.Getenv("OPENAI_API_KEY")
	channelName := os.Getenv("TELEGRAM_BOT_CHANNEL_NAME")
	webhookURL := os.Getenv("WEBHOOK_URL")

	if botToken == "" || openaiToken == "" || channelName == "" {
		log.Fatal("Missing required environment variables")
	}

	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Panic(err)
	}

	openaiClient := openai.NewClient(openaiToken)

	var updates tgbotapi.UpdatesChannel

	if webhookURL != "" {
		_, err = bot.SetWebhook(tgbotapi.NewWebhook(webhookURL))
		if err != nil {
			log.Fatal("Webhook error:", err)
		}
		info, err := bot.GetWebhookInfo()
		if err != nil || info.LastErrorDate != 0 {
			log.Fatal("Webhook setup error:", info.LastErrorMessage)
		}
		log.Println("Running in webhook mode.")
		updates = bot.ListenForWebhook("/")
		go http.ListenAndServe(":8080", nil)
	} else {
		log.Println("Running in polling mode.")
		u := tgbotapi.NewUpdate(0)
		u.Timeout = 60
		updates, err = bot.GetUpdatesChan(u)
		if err != nil {
			log.Fatal("Polling setup error:", err)
		}
	}

	ctx, cancel := context.WithCancel(context.Background())
	go handleSignals(cancel)

	processUpdates(ctx, bot, openaiClient, channelName, updates)

	log.Println("Bot shut down gracefully.")
}

func handleSignals(cancel context.CancelFunc) {
	signals := make(chan os.Signal, 1)
	signal.Notify(signals, syscall.SIGINT, syscall.SIGTERM)
	<-signals
	log.Println("Shutdown signal received, exiting...")
	cancel()
}

func processUpdates(ctx context.Context, bot *tgbotapi.BotAPI, openaiClient *openai.Client, channelName string, updates tgbotapi.UpdatesChannel) {
	rulesMessage := "üìù –ü—Ä–∞–≤–∏–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:\n\n" +
		"1. –¶–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äì –≤—ã–ø–ª–µ—Å–Ω—É—Ç—å —ç–º–æ—Ü–∏–∏ –∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n" +
		"2. –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.\n" +
		"3. –ó–∞–ø—Ä–µ—â–µ–Ω—ã –≥—Ä—É–±—ã–µ –º–∞—Ç–µ—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è."

	for {
		select {
		case <-ctx.Done():
			log.Println("Stopping update processing.")
			return
		case update := <-updates:
			if update.Message == nil || update.Message.Text == "" {
				continue
			}

			userID := update.Message.From.ID
			userMessage := update.Message.Text

			if userMessage == "/start" {
				bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, rulesMessage))
				continue
			}

			mu.Lock()
			lastTime, exists := userLastMessageTime[userID]
			lastMsg := userLastMessage[userID]
			if exists && time.Since(lastTime) < rateLimitDuration {
				mu.Unlock()
				bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "‚è≥ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑ –≤ 20 –º–∏–Ω—É—Ç."))
				log.Printf("UserID: %d, Username: %s, Msg: '%s', User error: RateLimited message", userID, update.Message.From.UserName, userMessage)
				continue
			}
			if lastMsg == userMessage {
				mu.Unlock()
				bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "‚ö†Ô∏è –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Ç–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–Ω–µ–µ."))
				log.Printf("UserID: %d, Username: %s, Msg: '%s', User error: Duplicated message", userID, update.Message.From.UserName, userMessage)
				continue
			}
			mu.Unlock()

			valid, openaiResponse, err := verifyMessageWithOpenAI(openaiClient, userMessage)
			if err != nil {
				log.Println("OpenAI error:", err)
				bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "üö´ –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
				continue
			}

			log.Printf("UserID: %d, Username: %s, Msg: '%s', OpenAI: '%s'", userID, update.Message.From.UserName, userMessage, openaiResponse)

			if !valid {
				bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "üö´ –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞–º.\n\n"+rulesMessage))
				continue
			}

			channelMsg, err := bot.Send(tgbotapi.NewMessageToChannel(channelName, userMessage))
			if err != nil {
				log.Println("Telegram error:", err)
				bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "üö´ –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."))
				continue
			}

			mu.Lock()
			userLastMessageTime[userID] = time.Now()
			userLastMessage[userID] = userMessage
			mu.Unlock()

			link := "https://t.me/" + strings.TrimPrefix(channelName, "@") + "/" + strconv.Itoa(channelMsg.MessageID)
			bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: "+link))
		}
	}
}
